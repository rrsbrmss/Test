---
#  Attention!
# before first run these tasks please scroll tasks down
# uncomment task named "create custom docker network"
- name: TestTask
  hosts: all
  become: yes

  tasks:

  - name: Install aptitude (a vdrug ego net...)
    apt:
      name: aptitude
      state: latest
      update_cache: true

  - name: Install required system packages
    apt:
      pkg:
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
        - python3-pip
        - python3-setuptools
      state: latest
      update_cache: true

  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/debian/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/debian bullseye stable
      state: present

  - name: Upd apt and inst docker softw
    apt:
      pkg:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-compose-plugin
      state: latest
      update_cache: true

  - name: Install Docker Module for Python
    pip:
      name: docker

  - name: start and enable docker service
    service:
      name: docker
      state: started
      enabled: true

#  uncomment below if that playbook run first time
#  - name: create custom docker network
#    command: docker network create --subnet=10.0.0.0/24 custom_network

  - name: pull & run nginx_geoip container
    docker_container:
      name: nginx
      image: k0ka/nginx-geoip2
      network_mode: custom_network
      ports:
        - "80:80"
      volumes:
        - "/srv/nginx/logs:/var/log/nginx"
        - "/srv/nginx:/etc/nginx"
        - "/srv/nginx/html:/var/www/html"


  - name: pull & run apache01 container
    docker_container:
      name: apache01
      image: httpd
      network_mode: custom_network
      ports:
        - "8081:80"
      volumes:
        - "/srv/apache01:/etc/apache2"
        - "/srv/apache01/logs:/var/log/apache2"
        - "/srv/apache01/html:/var/www/html"

  - name: pull & run apache02 container
    docker_container:
      name: apache02
      image: httpd
      network_mode: custom_network
      ports:
        - "8082:80"
      volumes:
        - "/srv/apache02:/etc/apache2"
        - "/srv/apache02/logs:/var/log/apache2"
        - "/srv/apache02/html:/var/www/html"

#  - name: pull & run nginx exporter container
#    docker_container:
#      name: nginx_exporter
#      image: bitnami/nginx-exporter:latest
#      network_mode: custom_network

#  - name: pull & run node exporter container
#    docker_container:
#      name: node_exporter
#      image: prom/node-exporter
#      network_mode: custom_network

#  - name: pull & run mysql exporter container
#    docker_container:
#      name: mysql_exporter
#      image: prom/mysqld-exporter
#      network_mode: custom_network

#  - name: pull & run cadvisor container
#    docker_container:
#      name: cadvisor
#      image: google/cadvisor
#      network_mode: custom_network

#  - name: pull & run prometheus container
#    docker_container:
#      name: prometheus
#      image: prom/prometheus
#      network_mode: custom_network

#  - name: pull and run grafana container
#    docker_container:
#      name: grafana
#      image: grafana/grafana
#      network_mode: custom_network

#  - name: pull & run fluentd container
#    docker_container:
#      name: fluentd
#      image: fluent/fluentd
#      network_mode: custom_network

#  - name: pull & run mysql container
#    docker_container:
#      name: mysql
#      image: mysql:5.7
#      network_mode: custom_network
#      env:
#        MYSQL_ROOT_PASSWORD: password
 
  - name: copy neccessary files&dirs stru to node
    copy:
      src: "{{item.src}}"
      dest: "{{item.dest}}"
    loop:
      - src: nginx/
        dest: /srv/nginx
      - src: apache01/
        dest: /srv/apache01
      - src: apache02/
        dest: /srv/apache02

#  - name: copy config files
#    template:
#      src: "{{item.src}}"
#      dest: "{{item.dest}}"
#    with_items:
#      - { src: "apache/apache2.conf", dest: "/srv/apache01/apache2.conf"}
#      - { src: "apache/apache2.conf", dest: "/srv/apache02/apache2.conf"}
#      - { src: "apache/ports.conf", dest: "/srv/apache01/ports.conf"}
#      - { src: "apache/ports.conf", dest: "/srv/apache02/ports.conf"}
#      - { src: "index.php", dest: "/srv/www/html/first.tst/index.php"}
#      - { src: "index.php", dest: "/srv/www/html/second.tst/index.php"}


  - name: create DNS records
    lineinfile:
      path: /etc/hosts
      line: '{{item}}'
    with_items:
      - '10.0.0.2 nginx'
      - '10.0.0.3 apache01'
      - '10.0.0.4 apache02'
#      - '10.0.0.5 node_exporter'
#      - '10.0.0.6 nginx_exporter'
#      - '10.0.0.7 mysql_exporter'
#      - '10.0.0.8 cadvisor'
#      - '10.0.0.9 prometheus'
#      - '10.0.0.10 grafana'
#      - '10.0.0.11 fluentd'
#      - '10.0.0.12 mysql'
      - '192.168.1.100 first.domain.name'
      - '192.168.1.100 second.domain.name'
  - name: Restart Docker service
    service:
      name: docker
      state: restarted
      enabled: true
  - name: Restart Nginx container
    command: docker restart nginx
  - name: Restart Apache containers
    command: docker restart apache01
  - name: Restart Apache containers
    command: docker restart apache02

#  - name: Restart Node exporter container
#    command: docker restart node_exporter
# - name: Restart Nginx exporter container
#    command: docker restart nginx_exporter
#  - name: Restart MySQL exporter container
#    command: docker restart mysql_exporter
#  - name: Restart Cadvisor container
#    command: docker restart cadvisor
#  - name: Restart Prometheus container
#    command: docker restart prometheus
#  - name: Restart Grafana container
#    command: docker restart grafana
#  - name: Restart Fluentd container
#    command: docker restart fluentd
#  - name: Restart MySQL container
#    command: docker restart mysql
#  - name: Check if all containers are running
#    command: docker ps
